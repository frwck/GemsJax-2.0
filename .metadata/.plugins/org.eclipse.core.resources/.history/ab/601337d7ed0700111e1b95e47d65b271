package org.gemsjax.server.persistence.dao;

import java.util.List;

import org.gemsjax.server.persistence.HibernateUtil;
import org.gemsjax.server.persistence.dao.exception.MoreThanOneExcpetion;
import org.gemsjax.server.persistence.experiment.ExperimentImpl;
import org.gemsjax.server.persistence.user.RegisteredUserImpl;
import org.gemsjax.shared.FieldVerifier;
import org.gemsjax.shared.experiment.Experiment;
import org.gemsjax.shared.experiment.ExperimentGroup;
import org.gemsjax.shared.experiment.ExperimentInvitation;
import org.gemsjax.shared.user.ExperimentUser;
import org.gemsjax.shared.user.RegisteredUser;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.Transaction;


/**
 * Use this Data Access Object to get Instances of:
 * <ul>
 * <li> {@link Experiment}</li>
 * <li> {@link ExperimentUser}</li>
 * <li> {@link ExperimentGroup}</li>
 * <li> {@link ExperimentInvitation}</li>
 * </ul>
 * @author Hannes Dorfmann
 *
 */
public class ExperimentDAO {

private Session session ;
	
	public ExperimentDAO()
	{
		session = HibernateUtil.getOpenedSession();
	}
	
	
	
	/**
	 * Create a new {@link Experiment} and assign it to the owner
	 * @param name
	 * @param description
	 * @param owner
	 * @return
	 */
	public Experiment createExperiment(String name, String description, RegisteredUser owner)
	{
		
		ExperimentImpl e = new ExperimentImpl();
		
		e.setName(name);
		e.setDescription(description);
		e.setOwner(owner);
		
		
		Transaction tx = session.beginTransaction();
			session.save(e);
		tx.commit();
		
		return e;
		
	}
	
	
	/**
	 * Get a {@link Experiment} by its unique id
	 * @param id
	 * @return
	 * @throws MoreThanOneExcpetion
	 */
	public Experiment getExperimentById(int id) throws MoreThanOneExcpetion
	{
		Query query = session.createQuery( "FROM ExperimentImpl WHERE id="+id );
	      
	    List<ExperimentImpl> result = query.list();
	    
	    if (result.size()>0)
	    	if (result.size()>1)
	    			throw new MoreThanOneExcpetion();
	    		else
	    			return result.get(0);
	    else
	    	return null;
	}
	
	
	
	public void updateExperiment(Experiment e, String name, String description) throws IllegalArgumentException
	{
		if (FieldVerifier.isNotEmpty(name))
			throw new IllegalArgumentException("Name is empty");
		
		if (FieldVerifier.isNotEmpty(description))
			throw new IllegalArgumentException("Description is empty");
		
		
		Transaction t = session.beginTransaction();
		
		if (!name.equals(e.getName()))
			e.setName(name);
		
		if (!description.equals(e.getDescription()))
			e.setDescription(description);
		
		t.commit();
	}
	
	
}
